<?xml version="1.0" ?>
<testsuites name="codescoring">	
    <testsuite time="" name= "/home/dude/GolandProjects/johnny-depp/fixtures/manifests/python/poetry.lock">		
     <testsuite tests= "8" failures="8" errors="0" skipped="0" time="" name= "django@3.0.7">		   
       <testcase classname="django@3.0.7" name="[7.5 High] [9.8 Critical] CVE-2021-35042"  time="">
            <failure type="description">Django 3.1.x before 3.1.13 and 3.2.x before 3.2.5 allows QuerySet.order_by SQL injection if order_by is untrusted input from a client of a web application.</failure>
        </testcase>
        <testcase classname="django@3.0.7" name="[7.5 High] [9.8 Critical] CVE-2022-28346"  time="">
            <failure type="description">An issue was discovered in Django 2.2 before 2.2.28, 3.2 before 3.2.13, and 4.0 before 4.0.4. QuerySet.annotate(), aggregate(), and extra() methods are subject to SQL injection in column aliases via a crafted dictionary (with dictionary expansion) as the passed **kwargs.</failure>
        </testcase>
        <testcase classname="django@3.0.7" name="[7.5 High] [9.8 Critical] CVE-2022-28347"  time="">
            <failure type="description">A SQL injection issue was discovered in QuerySet.explain() in Django 2.2 before 2.2.28, 3.2 before 3.2.13, and 4.0 before 4.0.4. This occurs by passing a crafted dictionary (with dictionary expansion) as the **options argument, and placing the injection payload in an option name.</failure>
        </testcase>
        <testcase classname="django@3.0.7" name="[7.5 High] [9.8 Critical] CVE-2022-34265"  time="">
            <failure type="description">An issue was discovered in Django 3.2 before 3.2.14 and 4.0 before 4.0.6. The Trunc() and Extract() database functions are subject to SQL injection if untrusted data is used as a kind/lookup_name value. Applications that constrain the lookup name and kind choice to a known safe list are unaffected.</failure>
        </testcase>
        <testcase classname="django@3.0.7" name="[None] [9.8 Critical] CVE-2023-31047"  time="">
            <failure type="description">In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django&#39;s &#34;Uploading multiple files&#34; documentation suggested otherwise.</failure>
        </testcase>
        <testcase classname="django@3.0.7" name="[None] [8.8 High] CVE-2022-36359"  time="">
            <failure type="description">An issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input.</failure>
        </testcase>
        <testcase classname="django@3.0.7" name="[5.0 Medium] [7.5 High] CVE-2021-45115"  time="">
            <failure type="description">An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. UserAttributeSimilarityValidator incurred significant overhead in evaluating a submitted password that was artificially large in relation to the comparison values. In a situation where access to user registration was unrestricted, this provided a potential vector for a denial-of-service attack.</failure>
        </testcase>
        <testcase classname="django@3.0.7" name="[5.0 Medium] [7.5 High] CVE-2021-45116"  time="">
            <failure type="description">An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. Due to leveraging the Django Template Language&#39;s variable resolution logic, the dictsort template filter was potentially vulnerable to information disclosure, or an unintended method call, if passed a suitably crafted key.</failure>
        </testcase>
          </testsuite>
    </testsuite>
    <testsuite tests= "1" failures="1" errors="0" skipped="0" time="" name= "pkg:pypi/py@1.9">		
        <testcase classname="pkg:pypi/py@1.9" name="[5.0 Medium] [7.5 High] CVE-2020-29651"  time="">
            <failure type="description">A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.</failure>
        </testcase>
    </testsuite>    
</testsuites>
